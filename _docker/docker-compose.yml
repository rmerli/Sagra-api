services:
  reverse-proxy:
    image: traefik:v3.2
    command: --api.insecure=true --providers.docker
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  build-image:
    container_name: build-image 
    build:
      context: ../
      dockerfile: _docker/go/x86.Dockerfile
      target: prod
      tags:
        - "sagre:build"
    environment:
      ENV: dev
      DB_URL: postgresql://sagre:sagre@sagre_db/sagre_go?sslmode=disable
      STORE_KEY: secret
      PORT: 6969
      ADDRESS: 0.0.0.0
    expose:
      - "6969"
    
  sagre-migration: 
    container_name: sagre-migration 
    image: "sagre:build"
    extends:
      service: build-image
    depends_on:
      build-image:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    entrypoint: /src/app/sql-migrate
    command: ["up", "-config=config/dbconfig.yml"]

  sagre:
    container_name: api
    extends:
      service: build-image
    image: sagre:build 
    restart: always
    depends_on: 
      build-image:
        condition: service_completed_successfully
      sagre-migration:
        condition: service_completed_successfully
    entrypoint: /src/app/bin/main
    labels:
      - "traefik.http.routers.sagre.rule=Host(`api.sagre`)"

  db:
    container_name: sagre_db
    image: postgres:17.2
    restart: always
    environment:
      POSTGRES_USER: sagre
      POSTGRES_PASSWORD: sagre
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - ./postgres/docker-entrypoint-initdb/:/docker-entrypoint-initdb.d/
      - ./postgres/data:/var/lib/postgresql/data
